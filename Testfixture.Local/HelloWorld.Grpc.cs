// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: HelloWorld.proto
// </auto-generated>
// Original file comments:
//
// Copyright 2018 Peter Vrenken.
//
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace EtAlii.xTechnology.Grpc.Tools.Examples {
  /// <summary>
  /// The Example service.
  /// </summary>
  public static partial class HelloWorldService2
  {
    static readonly string __ServiceName = "EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldService2";

    static readonly grpc::Marshaller<global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldRequest> __Marshaller_HelloWorldRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldResponse> __Marshaller_HelloWorldResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldRequest, global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldResponse> __Method_InvokeExample = new grpc::Method<global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldRequest, global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InvokeExample",
        __Marshaller_HelloWorldRequest,
        __Marshaller_HelloWorldResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of HelloWorldService2</summary>
    public abstract partial class HelloWorldService2Base
    {
      /// <summary>
      /// &lt;summary>
      /// Retrieves all available guids in an array.
      /// &lt;/summary>
      /// &lt;returns> Array with all guids. &lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldResponse> InvokeExample(global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HelloWorldService2</summary>
    public partial class HelloWorldService2Client : grpc::ClientBase<HelloWorldService2Client>
    {
      /// <summary>Creates a new client for HelloWorldService2</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HelloWorldService2Client(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HelloWorldService2 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HelloWorldService2Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HelloWorldService2Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HelloWorldService2Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// &lt;summary>
      /// Retrieves all available guids in an array.
      /// &lt;/summary>
      /// &lt;returns> Array with all guids. &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldResponse InvokeExample(global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvokeExample(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// &lt;summary>
      /// Retrieves all available guids in an array.
      /// &lt;/summary>
      /// &lt;returns> Array with all guids. &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldResponse InvokeExample(global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InvokeExample, null, options, request);
      }
      /// <summary>
      /// &lt;summary>
      /// Retrieves all available guids in an array.
      /// &lt;/summary>
      /// &lt;returns> Array with all guids. &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldResponse> InvokeExampleAsync(global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvokeExampleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// &lt;summary>
      /// Retrieves all available guids in an array.
      /// &lt;/summary>
      /// &lt;returns> Array with all guids. &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldResponse> InvokeExampleAsync(global::EtAlii.xTechnology.Grpc.Tools.Examples.HelloWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InvokeExample, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HelloWorldService2Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new HelloWorldService2Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HelloWorldService2Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_InvokeExample, serviceImpl.InvokeExample).Build();
    }

  }
}
#endregion
